name: Django CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-review:
    name: Build, Test & SonarQube Review
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1️⃣ Code clone
      - name: Checkout source
        uses: actions/checkout@v4

      # 2️⃣ Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 3️⃣ Install dependencies
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4️⃣ Run database migrations
      - name: Django migrate
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          python manage.py migrate

      # 5️⃣ Unit testing
      - name: Run unit tests
        run: |
          python manage.py test

      # 6️⃣ SonarQube scan (compile + review)
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectKey=django-ecommerce
            -Dsonar.sources=.
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      - name: SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          args: >
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker-build-deploy:
    name: Docker Build & Deploy
    needs: build-test-review
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Code clone again for this job
      - name: Checkout source
        uses: actions/checkout@v4

      # 2️⃣ Build Docker image
      - name: Docker build
        run: |
          docker build -t ${{ secrets.DOCKER_USER }}/django-ecommerce:${{ github.sha }} .

      # 3️⃣ Push Docker image to registry
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USER }}/django-ecommerce:${{ github.sha }}

      # 4️⃣ Deploy to staging/production server (example with SSH)
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USER }}/django-ecommerce:${{ github.sha }}
            docker stop django-ecommerce || true
            docker rm django-ecommerce || true
            docker run -d --name django-ecommerce -p 8000:8000 \
              ${{ secrets.DOCKER_USER }}/django-ecommerce:${{ github.sha }}
